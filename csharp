{
	// Place your snippets for csharp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"MySqlConex": {
		"prefix": "genconexdb",
		"body": [
		  "\"ConnectionStrings\": {",
		  "    \"MySqlConex\": \"server=localhost;user=root;password=123456;database=notiapi;\"",
		  "  }"
		],
		"description":"MySqlConex"
	  },
	  "ArchivoContext_DbContext": {
		"prefix": "gendbcontext",
		"body": [
		  "public class NotiContext : DbContext { ",
		  "        public NotiContext (DbContextOptions options) : base(options){ }",
		  "        public DbSet<Rol> Roles { get; set; }",
		  "        /*-*/",
		  "        protected override void OnModelCreating(ModelBuilder modelBuilder){",
		  "            base.OnModelCreating(modelBuilder);",
		  "            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());",
		  "        }"
		],
		"description": "ArchivoContext_DbContext"
	  },
	  "InjectDb1_AddDbContext": {
		"prefix": "geninject1",
		"body": [
		  "//builder.Services.AddSwaggerGen();",
		  "builder.Services.AddDbContext<NotiContext>(options =>",
		  "{",
		  "    string connectionString = builder.Configuration.GetConnectionString(\"MySqlConex\");",
		  "    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));",
		  "});",
		  "//var app = builder.Build();"
		],
		"description": "InjectDb1_AddDbContext"
	  },
	  "Entity-Attribute_int": {
		"prefix": "genattributeint",
		"body": [
		  "public int Id { get; set; }"
		],
		"description": "Entity-Attribute_int"
	  },
	  "Entity-Attribute_double": {
		"prefix": "genattributedouble",
		"body": [
		  "public double Price { get; set; }"
		],
		"description": "Entity-Attribute_double"
	  },
	  "Entity-Attribute_datetime": {
		"prefix": "genattributedatetime",
		"body": [
		  "public DateTime Date { get; set; }"
		],
		"description": "Entity-Attribute_datetime"
	  },
	  "Entity-Attribute_string": {
		"prefix": "genattributestring",
		"body": [
		  "public string Name { get; set; }"
		],
		"description": "Entity-Attribute_string"
	  },
	  "Entity-Relation_onetooneParent": {
		"prefix": "genentityonetooneParent",
		"body": [
		  " public BlogHeader Header { get; set; }"
		],
		"description": "Entity-Relation_onetoone"
	  },
	  "Entity-Relation_onetooneChild": {
		"prefix": "genentityonetooneChild",
		"body": [
		  "public Blog Blog { get; set; }"
		],
		"description": "Entity-Relation_onetooneChild"
	  },
	  "Entity-Relation_onetomanyParent": {
		"prefix": "genentityonetomanyParent",
		"body": [
		  "public ICollection<Post> Posts { get; set; }"
		],
		"description": "Entity-Relation_onetomanyParent"
	  },
	  "Entity-Relation_onetomanyChild": {
		"prefix": "genentityonetomanyChild",
		"body": [
		  "public Blog Blog { get; set; }"
		],
		"description": "Entity-Relation_onetomanyChild"
	  },
	  "Entity-Relation_manytomany": {
		"prefix": "genentitymanytomany",
		"body": [
		  "public List<Tag> Tags { get; set; }"
		],
		"description": "Entity-Relation_manytomany"
	  },"EntityConfiguration-Relation_onetoone": {
		"prefix": "genentityconfigonetoone",
		"body": [
		  "builder.Entity<Blog>()",
		  "        .HasOne(e => e.Header)",
		  "        .WithOne(e => e.Blog)",
		  "        .HasForeignKey<BlogHeader>(e => e.BlogId)",
		  "        .IsRequired();"
		],
		"description": "EntityConfiguration-Relation_onetoone"
	  },
	  "EntityConfiguration-Relation_onetomany": {
		"prefix": "genentityconfigonetomany",
		"body": [
		  "builder.Entity<Post>()",
		  "        .HasOne(e => e.Blog)",
		  "        .WithMany(e => e.Posts)",
		  "        .HasForeignKey(e => e.BlogId)",
		  "        .IsRequired();"
		],
		"description": "EntityConfiguration-Relation_onetomany"
	  },
	  "EntityConfiguration-Relation_manytomany": {
		"prefix": "genentityconfigmanytomany",
		"body": [
		  "builder.Entity<Post>()",
		  "        .HasMany(e => e.Tags)",
		  "        .WithMany(e => e.Posts);"
		],
		"description": "EntityConfiguration-Relation_manytomany"
	  },
	  "EntityConfiguration-HasKey": {
		"prefix": "genentityconfighaskey",
		"body": [
		  "builder.HasKey(e => e.Id);"
		],
		"description": "EntityConfiguration-HasKey"
	  },"EntityConfiguration-CompoundKey": {
		"prefix": "genentityconfigurationcompoundkey",
		"body": [
		  "builder.HasKey(e => new{e.Id1,e.Id2});"
		],
		"description": "EntityConfiguration-CompoundKey"
	  },
	  "EntityConfiguration-PropertyInt": {
		"prefix": "genentityconfigpropertyint",
		"body": [
		  "builder.Property(e => e.age)",
		  "  .IsRequired()",
		  "  .HasColumnType(\"int\");"
		],
		"description": "EntityConfiguration-PropertyInt"
	  },
	  "EntityConfiguration-PropertyString": {
		"prefix": "genentityconfigpropertystring",
		"body": [
		  "builder.Property(e => e.Name)",
		  "  .IsRequired()",
		  "  .HasMaxLength(10);"
		],
		"description": "EntityConfiguration-PropertyString"
	  },
	  "EntityConfiguration-PropertyDateTime": {
		"prefix": "genentityconfigpropertydatetime",
		"body": [
		  "builder.Property(e => e.date)",
		  "  .IsRequired()",
		  "  .HasColumnType(\"datetime\");"
		],
		"description": "EntityConfiguration-PropertyDateTime"
	  },
	  "EntityConfiguration-PropertyUnique": {
		"prefix": "genentityconfigpropertyunique",
		"body": [
		  "builder.HasIndex(e => e.Name)",
		  " .IsUnique();"
		],
		"description": "EntityConfiguration-PropertyUnique"
	  },
	  "Profiles-MappingProfiles": {
		"prefix": "genprofilesmappingprofiles",
		"body": [
		  "public class MappingProfiles : Profile",
		  "    {",
		  "        public MappingProfiles()",
		  "        {",
		  "            CreateMap<Auditoria,AuditoriaDto>().ReverseMap();",
		  "            CreateMap<Blockchain,BlockchainDto>().ReverseMap();",
		  "            CreateMap<EstadoNotificacion,EstadoNotificacionDto>().ReverseMap();",
		  "            CreateMap<Formato,FormatoDto>().ReverseMap();",
		  "            CreateMap<GenericosVsSubmoduloDto,GenericosVsSubmoduloDto>().ReverseMap();",
		  "            CreateMap<HiloRespuestaNotificacion,HiloRespuestaNotificacionDto>().ReverseMap();",
		  "            CreateMap<MaestrosVsSubmodulo,MaestrosVsSubmoduloDto>().ReverseMap();",
		  "            CreateMap<ModuloNotificacion,ModuloNotificacionDto>().ReverseMap();",
		  "            CreateMap<ModulosMaestro,ModulosMaestroDto>().ReverseMap();",
		  "            CreateMap<PermisoGenerico,PermisoGenericoDto>().ReverseMap();",
		  "            CreateMap<Radicado,RadicadoDto>().ReverseMap();",
		  "            CreateMap<Rol,RolDto>().ReverseMap();",
		  "            CreateMap<RolVsMaestro,RolVsMaestroDto>().ReverseMap();",
		  "            CreateMap<Submodulo,SubmoduloDto>().ReverseMap();",
		  "            CreateMap<TipoNotificacion,TipoNotificacionDto>().ReverseMap();",
		  "            CreateMap<TipoRequerimiento,TipoRequerimientoDto>().ReverseMap();",
		  "            ",
		  "        }"
		],
		"description": "Profiles-MappingProfiles"
	  },
	  "Extensions-ApplicationServiceExtension": {
		"prefix": "genextensionsapplicationserviceextension",
		"body": [
		  "public static class ApplicationServiceExtension",
		  "    {",
		  "        public static void ConfigureCors(this IServiceCollection services) =>",
		  "            services.AddCors(options =>",
		  "            {",
		  "                options.AddPolicy(",
		  "                    \"CorsPolicy\",",
		  "                    builder =>",
		  "                        builder",
		  "                            .AllowAnyOrigin() //WithOrigins(\"https://domini.com\")",
		  "                            .AllowAnyMethod() //WithMethods(*GET\", \"POST\")",
		  "                            .AllowAnyHeader()",
		  "                ); //WithHeaders(*accept*, \"content-type\")",
		  "            });",
		  "",
		  "        public static void AddApplicationServices(this IServiceCollection services)",
		  "        {",
		  "            services.AddScoped<IUnitOfWork, UnitOfWork>();",
		  "        }",
		  "",
		  "        public static void ConfigureRatelimiting(this IServiceCollection services)",
		  "        {",
		  "            services.AddMemoryCache();",
		  "            services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();",
		  "            services.AddInMemoryRateLimiting();",
		  "            services.Configure<IpRateLimitOptions>(options =>",
		  "            {",
		  "                options.EnableEndpointRateLimiting = true;",
		  "                options.StackBlockedRequests = false;",
		  "                options.HttpStatusCode = 429;",
		  "                options.RealIpHeader = \"X-Real-IP\";",
		  "                options.GeneralRules = new List<RateLimitRule>",
		  "                {",
		  "                    new RateLimitRule",
		  "                    {",
		  "                        Endpoint = \"*\",",
		  "                        Period = \"10s\",",
		  "                        Limit = 2",
		  "                    }",
		  "                };",
		  "            });",
		  "        }",
		  "    }",
		  ""
		],
		"description": "Extensions-ApplicationServiceExtension"
	  },
	  "InjectDb2_ApplicationServiceExtension": {
		"prefix": "geninject2",
		"body": [
		  "//builder.Services.AddControllers();",
		  "/* Inyeccion de metodos de extension al contenedor de dependencias */",
		  "builder.Services.ConfigureRatelimiting();",
		  "//builder.Services.AddAutoMapper(Assembly.GetEntryAssembly());",
		  "builder.Services.ConfigureCors();",
		  "//builder.Services.AddApplicationServices(); Inject to ApplicationServices",
		  "//builder.Services.AddEndpointsApiExplorer();",
		  "",
		  "",
		  "/*if (app.Environment.IsDevelopment())",
		  "{",
		  "    app.UseSwagger();",
		  "    app.UseSwaggerUI();",
		  "}*/",
		  "// Inyeccion completa de los cors",
		  "app.UseCors(\"CorsPolicy\");",
		  "",
		  "app.UseHttpsRedirection();  ",
		  "",
		  "app.UseIpRateLimiting();",
		  "",
		  "//app.UseAuthorization();"
		],
		"description": "Extensions-ApplicationServiceExtension"
	  },
	  "Interfaces-IGenericRepository": {
		"prefix": "genigenericrepository",
		"body": [
		  "public interface IGenericRepository<T> where T : BaseEntity",
		  "        {",
		  "                Task<T> GetByIdAsync(int id);",
		  "                Task<IEnumerable<T>> GetAllAsync();",
		  "                IEnumerable<T> Find(Expression<Func<T, bool>> expression);",
		  "                Task<(int totalRegistros, IEnumerable<T> registros)> GetAllAsync(int pageIndex, int pageSize, string search);",
		  "                void Add(T entity);",
		  "                void AddRange(IEnumerable<T> entities);",
		  "                void Remove(T entity);",
		  "                void RemoveRange(IEnumerable<T> entities);",
		  "                void Update(T entity);",
		  "        }"
		],
		"description": "Interfaces-IGenericRepository"
	  },
	  "Interfaces-IEntityRepository": {
		"prefix": "genientityrepository",
		"body": [
		  "public interface IEntityRepository:IGenericRepository<Entity>",
		  "{",
		  "}",
		  "  "
		],
		"description": "Interfaces-IEntityRepository"
	  },
	  "Repository-GenericRepository": {
		"prefix": "genrepositorygenericrepository",
		"body": [
		  "public class GenericRepository<T> : IGenericRepository<T>",
		  "        where T : BaseEntity",
		  "    {",
		  "        private readonly NotiContext _context;",
		  "",
		  "        public GenericRepository(NotiContext context)",
		  "        {",
		  "            _context = context;",
		  "        }",
		  "",
		  "        public virtual void Add(T entity)",
		  "        {",
		  "            _context.Set<T>().Add(entity);",
		  "        }",
		  "",
		  "        public virtual void AddRange(IEnumerable<T> entities)",
		  "        {",
		  "            _context.Set<T>().AddRange(entities);",
		  "        }",
		  "",
		  "        public virtual IEnumerable<T> Find(Expression<Func<T, bool>> expression)",
		  "        {",
		  "            return _context.Set<T>().Where(expression);",
		  "        }",
		  "",
		  "        public virtual async Task<IEnumerable<T>> GetAllAsync()",
		  "        {",
		  "            return await _context.Set<T>().ToListAsync();",
		  "            //return (IEnumerable<T>)await _context.Paises.FromSqlRaw(\"SELECT * FROM pais\").ToListAsync();",
		  "        }",
		  "",
		  "        public virtual async Task<T> GetByIdAsync(int id)",
		  "        {",
		  "            return await _context.Set<T>().FindAsync(id);",
		  "        }",
		  "",
		  "        public virtual async Task<T> GetByIdAsync(string id)",
		  "        {",
		  "            return await _context.Set<T>().FindAsync(id);",
		  "        }",
		  "        public virtual void Remove(T entity)",
		  "        {",
		  "            _context.Set<T>().Remove(entity);",
		  "        }",
		  "        public virtual void RemoveRange(IEnumerable<T> entities)",
		  "        {",
		  "            _context.Set<T>().RemoveRange(entities);",
		  "        }",
		  "        public virtual void Update(T entity)",
		  "        {",
		  "            _context.Set<T>().Update(entity);",
		  "        }",
		  "        public virtual async Task<(int totalRegistros, IEnumerable<T> registros)> GetAllAsync(",
		  "            int pageIndex,",
		  "            int pageSize,",
		  "            string _search)",
		  "        {",
		  "            var totalRegistros = await _context.Set<T>().CountAsync();",
		  "            var registros = await _context",
		  "                .Set<T>()",
		  "                .Skip((pageIndex - 1) * pageSize)",
		  "                .Take(pageSize)",
		  "                .ToListAsync();",
		  "            return (totalRegistros, registros);",
		  "        }",
		  "    }"
		],
		"description": "Repository-GenericRepository"
	  },
	  "Repository-EntityRepository": {
		"prefix": "genentityrepository",
		"body": [
		  "public class AuditoriaRepository : GenericRepository<Auditoria>, IAuditoriaRepository",
		  "    {",
		  "        private readonly NotiContext _context;",
		  "",
		  "        public AuditoriaRepository(NotiContext context) : base(context)",
		  "        {",
		  "            _context = context;",
		  "        }",
		  "    }"
		],
		"description": "Repository-EntityRepository"
	  },"Interfaces-IUnitOfWork": {
		"prefix": "geniunitofwork",
		"body": [
		  "public interface IUnitOfWork",
		  "    {",
		  "        ",
		  "        IAuditoriaRepository Auditorias { get; }",
		  "        IBlockchainRepository Blockchains { get; }",
		  "        IEstadoNotificacionRepository EstadosNotificaciones { get; }",
		  "        IFormatoRepository Formatos { get; }",
		  "        IGenericosVsSubmoduloRepository GenericosVsSubmodulos { get; }",
		  "        IHiloRespuestaNotificacionRepository HiloRespuestasNotificaciones { get; }",
		  "        IMaestrosVsSubmoduloRepository MaestrosVsSubmodulos { get; }",
		  "        IModuloNotificacionRepository ModulosNotificaciones { get; }",
		  "        IModulosMaestroRepository ModulosMaestros { get; }",
		  "        IPermisoGenericoRepository PermisosGenericos { get; }",
		  "        IRadicadoRepository Radicados { get; }",
		  "        IRolRepository Roles { get; }",
		  "        IRolVsMaestroRepository RolVsMaestros { get; }",
		  "        ISubmoduloRepository Submodulos { get; }",
		  "        ITipoNotificacionRepository TiposNotificaciones { get; }",
		  "        ITipoRequerimientoRepository TiposRequerimientos { get; }",
		  "        Task<int> SaveAsync(); ",
		  "    }"
		],
		"description": "Interfaces-IUnitOfWork"
	  },
	  "Class-UnitOfWork": {
		"prefix": "genclassunitofwork",
		"body": [
		  "public class UnitOfWork : IUnitOfWork, IDisposable",
		  "{",
		  "    private readonly NotiContext _context;",
		  "    private AuditoriaRepository _auditorias;",
		  "    private BlockchainRepository _blockchains;",
		  "    private EstadoNotificacionRepository _estadosnotificaciones;",
		  "    private FormatoRepository _formatos;",
		  "    private GenericosVsSubmoduloRepository _genericosvssubmodulos;",
		  "    private HiloRespuestaNotificacionRepository _hilorespuestasnotificaciones;",
		  "    private MaestrosVsSubmoduloRepository _maestrosvssubmodulos;",
		  "    private ModuloNotificacionRepository _modulosnotificaciones;",
		  "    private ModulosMaestroRepository _modulosmaestros;",
		  "    private PermisoGenericoRepository _permisosgenericos;",
		  "    private RadicadoRepository _radicados;",
		  "    private RolRepository _roles;",
		  "    private RolVsMaestroRepository _rolvsmaestros;",
		  "    private SubmoduloRepository _submodulos;",
		  "    private TipoNotificacionRepository _tiposnotificaciones;",
		  "    private TipoRequerimientoRepository _tiposrequerimientos;",
		  "",
		  "    public IAuditoriaRepository Auditorias",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_auditorias == null)",
		  "            {",
		  "                _auditorias = new AuditoriaRepository(_context);",
		  "            }",
		  "            return _auditorias;",
		  "        }",
		  "    }",
		  "",
		  "    public IBlockchainRepository Blockchains",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_blockchains == null)",
		  "            {",
		  "                _blockchains = new BlockchainRepository(_context);",
		  "            }",
		  "            return _blockchains;",
		  "        }",
		  "    }",
		  "",
		  "    public IEstadoNotificacionRepository EstadosNotificaciones",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_estadosnotificaciones == null)",
		  "            {",
		  "                _estadosnotificaciones = new EstadoNotificacionRepository(_context);",
		  "            }",
		  "            return _estadosnotificaciones;",
		  "        }",
		  "    }",
		  "",
		  "    public IFormatoRepository Formatos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_formatos == null)",
		  "            {",
		  "                _formatos = new FormatoRepository(_context);",
		  "            }",
		  "            return _formatos;",
		  "        }",
		  "    }",
		  "",
		  "    public IGenericosVsSubmoduloRepository GenericosVsSubmodulos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_genericosvssubmodulos == null)",
		  "            {",
		  "                _genericosvssubmodulos = new GenericosVsSubmoduloRepository(_context);",
		  "            }",
		  "            return _genericosvssubmodulos;",
		  "        }",
		  "    }",
		  "",
		  "    public IHiloRespuestaNotificacionRepository HiloRespuestasNotificaciones",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_hilorespuestasnotificaciones == null)",
		  "            {",
		  "                _hilorespuestasnotificaciones = new HiloRespuestaNotificacionRepository(_context);",
		  "            }",
		  "            return _hilorespuestasnotificaciones;",
		  "        }",
		  "    }",
		  "",
		  "    public IMaestrosVsSubmoduloRepository MaestrosVsSubmodulos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_maestrosvssubmodulos == null)",
		  "            {",
		  "                _maestrosvssubmodulos = new MaestrosVsSubmoduloRepository(_context);",
		  "            }",
		  "            return _maestrosvssubmodulos;",
		  "        }",
		  "    }",
		  "",
		  "    public IModuloNotificacionRepository ModulosNotificaciones",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_modulosnotificaciones == null)",
		  "            {",
		  "                _modulosnotificaciones = new ModuloNotificacionRepository(_context);",
		  "            }",
		  "            return _modulosnotificaciones;",
		  "        }",
		  "    }",
		  "",
		  "    public IModulosMaestroRepository ModulosMaestros",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_modulosmaestros == null)",
		  "            {",
		  "                _modulosmaestros = new ModulosMaestroRepository(_context);",
		  "            }",
		  "            return _modulosmaestros;",
		  "        }",
		  "    }",
		  "    public IPermisoGenericoRepository PermisosGenericos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_permisosgenericos == null)",
		  "            {",
		  "                _permisosgenericos = new PermisoGenericoRepository(_context);",
		  "            }",
		  "            return _permisosgenericos;",
		  "        }",
		  "    }",
		  "",
		  "    public IRadicadoRepository Radicados",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_radicados == null)",
		  "            {",
		  "                _radicados = new RadicadoRepository(_context);",
		  "            }",
		  "            return _radicados;",
		  "        }",
		  "    }",
		  "",
		  "    public IRolRepository Roles",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_roles == null)",
		  "            {",
		  "                _roles = new RolRepository(_context);",
		  "            }",
		  "            return _roles;",
		  "        }",
		  "    }",
		  "",
		  "    public IRolVsMaestroRepository RolVsMaestros",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_rolvsmaestros == null)",
		  "            {",
		  "                _rolvsmaestros = new RolVsMaestroRepository(_context);",
		  "            }",
		  "            return _rolvsmaestros;",
		  "        }",
		  "    }",
		  "",
		  "    public ISubmoduloRepository Submodulos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_submodulos == null)",
		  "            {",
		  "                _submodulos = new SubmoduloRepository(_context);",
		  "            }",
		  "            return _submodulos;",
		  "        }",
		  "    }",
		  "",
		  "    public ITipoNotificacionRepository TiposNotificaciones",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_tiposnotificaciones == null)",
		  "            {",
		  "                _tiposnotificaciones = new TipoNotificacionRepository(_context);",
		  "            }",
		  "            return _tiposnotificaciones;",
		  "        }",
		  "    }",
		  "",
		  "    public ITipoRequerimientoRepository TiposRequerimientos",
		  "    {",
		  "        get",
		  "        {",
		  "            if (_tiposrequerimientos == null)",
		  "            {",
		  "                _tiposrequerimientos = new TipoRequerimientoRepository(_context);",
		  "            }",
		  "            return _tiposrequerimientos;",
		  "        }",
		  "    }",
		  "",
		  "    public UnitOfWork(NotiContext context)",
		  "    {",
		  "        _context = context;",
		  "    }",
		  "",
		  "    public async Task<int> SaveAsync()",
		  "    {",
		  "        return await _context.SaveChangesAsync();",
		  "    }",
		  "",
		  "    public void Dispose()",
		  "    {",
		  "        _context.Dispose();",
		  "    }"
		],
		"description": "Class-UnitOfWork"
	  },
	  "Controller-BaseController": {
		"prefix": "gencontrollerbasecontroller",
		"body": [
		  "[ApiController]",
		  "[Route(\"[controller]\")]",
		  "public class BaseController : ControllerBase",
		  "{ ",
		  "",
		  "}"
		],
		"description": "Controller-BaseController"
	  },
	  "Controller-EntityController": {
		"prefix": "gencontrollerentitycontroller",
		"body": [
		  "public class AuditoriaController : BaseController",
		  "{",
		  "    private readonly IUnitOfWork _unitOfWork;",
		  "    private readonly IMapper _mapper;",
		  "",
		  "    public AuditoriaController(IUnitOfWork unitOfWork, IMapper mapper)",
		  "    {",
		  "        _unitOfWork = unitOfWork;",
		  "        _mapper = mapper;",
		  "    }",
		  "",
		  "    [HttpGet]",
		  "    [ProducesResponseType(StatusCodes.Status200OK)]",
		  "    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "    public async Task<ActionResult<IEnumerable<AuditoriaDto>>> Get()",
		  "    {",
		  "        var auditorias = await _unitOfWork.Auditorias.GetAllAsync();",
		  "",
		  "        //var paises = await _unitOfWork.Paises.GetAllAsync();",
		  "        return _mapper.Map<List<AuditoriaDto>>(auditorias);",
		  "    }",
		  "",
		  "    [HttpPost]",
		  "    [ProducesResponseType(StatusCodes.Status201Created)]",
		  "    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "    public async Task<ActionResult<Auditoria>> Post(AuditoriaDto auditoriaDto)",
		  "    {",
		  "        var auditoria = _mapper.Map<Auditoria>(auditoriaDto);",
		  "        this._unitOfWork.Auditorias.Add(auditoria);",
		  "        await _unitOfWork.SaveAsync();",
		  "        if (auditoria == null)",
		  "        {",
		  "            return BadRequest();",
		  "        }",
		  "        auditoriaDto.Id = auditoria.Id;",
		  "        return CreatedAtAction(nameof(Post), new { id = auditoriaDto.Id }, auditoriaDto);",
		  "    }",
		  "    [HttpGet(\"{id}\")]",
		  "    [ProducesResponseType(StatusCodes.Status200OK)]",
		  "    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "    [ProducesResponseType(StatusCodes.Status404NotFound)]",
		  "    public async Task<ActionResult<AuditoriaDto>> Get(int id)",
		  "    {",
		  "        var auditoria = await _unitOfWork.Auditorias.GetByIdAsync(id);",
		  "        if (auditoria == null){",
		  "            return NotFound();",
		  "        }",
		  "        return _mapper.Map<AuditoriaDto>(auditoria);",
		  "    }",
		  "    [HttpPut(\"{id}\")]",
		  "    [ProducesResponseType(StatusCodes.Status200OK)]",
		  "    [ProducesResponseType(StatusCodes.Status404NotFound)]",
		  "    [ProducesResponseType(StatusCodes.Status400BadRequest)]",
		  "    public async Task<ActionResult<AuditoriaDto>> Put(int id, [FromBody] AuditoriaDto auditoriaDto)",
		  "    {",
		  "        if (auditoriaDto == null)",
		  "        {",
		  "            return NotFound();",
		  "        }",
		  "        var auditorias = _mapper.Map<Auditoria>(auditoriaDto);",
		  "        _unitOfWork.Auditorias.Update(auditorias);",
		  "        await _unitOfWork.SaveAsync();",
		  "        return auditoriaDto;",
		  "    }",
		  "",
		  "    [HttpDelete(\"{id}\")]",
		  "    [ProducesResponseType(StatusCodes.Status204NoContent)]",
		  "    [ProducesResponseType(StatusCodes.Status404NotFound)]",
		  "    public async Task<IActionResult> Delete(int id)",
		  "    {",
		  "        var auditoria = await _unitOfWork.Auditorias.GetByIdAsync(id);",
		  "        if (auditoria == null)",
		  "        {",
		  "            return NotFound();",
		  "        }",
		  "        _unitOfWork.Auditorias.Remove(auditoria);",
		  "        await _unitOfWork.SaveAsync();",
		  "        return NoContent();",
		  "    }",
		  "}"
		],
		"description": "Controller-EntityController"
	  },
	  "Helpers-Pager": {
		"prefix": "genhelperpager",
		"body": [
		  "public class Pager<T>",
		  "    where T : class",
		  "{",
		  "    public string Search { get; set; }",
		  "    public int PageIndex { get; set; }",
		  "    public int PageSize { get; set; }",
		  "    public int Total { get; set; }",
		  "    public List<T> Registers { get; private set; }",
		  "",
		  "    public Pager() { }",
		  "",
		  "    public Pager(List<T> registers, int total, int pageIndex, int pageSize, string search)",
		  "    {",
		  "        Registers = registers;",
		  "        Total = total;",
		  "        PageIndex = pageIndex;",
		  "        PageSize = pageSize;",
		  "        Search = search;",
		  "    }",
		  "",
		  "    public int TotalPages",
		  "    {",
		  "        get { return (int)Math.Ceiling(Total / (double)PageSize); }",
		  "        set { this.TotalPages = value; }",
		  "    }",
		  "",
		  "    public bool HasPreviousPage",
		  "    {",
		  "        get { return (PageIndex > 1); }",
		  "        set { this.HasPreviousPage = value; }",
		  "    }",
		  "",
		  "    public bool HasNextPage",
		  "    {",
		  "        get { return (PageIndex < TotalPages); }",
		  "        set { this.HasNextPage = value; }",
		  "    }",
		  "}"
		],
		"description": "Helpers-Pager"
	  },
	  "Helpers-Params": {
		"prefix": "genhelperparams",
		"body": [
		  "public class Params",
		  "{",
		  "    private int _pageSize = 5;",
		  "    private const int MaxPageSize = 50;",
		  "    private int _pageIndex = 1;",
		  "    private string _search;",
		  "    public int PageSize",
		  "    {",
		  "        get => _pageSize;",
		  "        set => _pageSize = (value > MaxPageSize) ? MaxPageSize : value;",
		  "    }",
		  "    public int PageIndex",
		  "    {",
		  "        get => _pageIndex;",
		  "        set => _pageIndex = (value <= 0) ? 1 : value;",
		  "    }",
		  "    public string Search",
		  "    {",
		  "        get => _search;",
		  "        set => _search = (!String.IsNullOrEmpty(value)) ? value.ToLower() : \"\";",
		  "    }",
		  "}"
		],
		"description": "Helpers-Params"
	  },
	  "Migrations-MigrationAdd": {
		"prefix": "genmigrationadd",
		"body": [
		  "dotnet ef migrations add InitialCreate --project ./Infrastructure --startup-project ./API/ --output-dir ./Data/Migrations"
		],
		"description": "Migration-MigrationsAdd"
	  },
	  "Migrations-MigrationUpdate": {
		"prefix": "genmigrationupdate",
		"body": [
		  "dotnet ef database update --project ./Infrastructure --startup-project ./API/"
		],
		"description": "Migrations-MigrationUpdate"
	  }	
}
